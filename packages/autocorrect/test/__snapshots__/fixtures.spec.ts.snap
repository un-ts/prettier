// Vitest Snapshot v1

exports[`parser and printer > should format all fixtures > test.css 1`] = `
"/* 
  这是多行 CSS 第 1 行
  这是第 2 行
*/
.btn {
  .strong { font-weight: bold; }
  padding: 10px; // comment 在属性后面
  // 这是 comment 单行
  font: Helvetica, sans-serif;
}
"
`;

exports[`parser and printer > should format all fixtures > test.go 1`] = `
"// WithContext 创建基于 ctx 的 db
// 第 2 行注释
func (d *Dao) WithContext(ctx context.Context) (db *gorm.DB) {
  a := \\"第 1 个\\"
  b := \\\\\`
  多行 string
  第 2 行
  \\\\\`
  re := regexp.MustCompile(\\\\\`regexp 不处理\\\\\`)
  re1 := regexp.Compile(\\"regexp不处理\\")
  t := time.Parse(\\"2006年01月02日 15:04\\", t)
  fmt.Println(a + b + \\"go 语言\\")
  fmt.Println(\\"%s链接的内容不会空格%d也不处理，保守\\", \\"格式\\", 100)
  db = d.DB.WithContext(ctx)
  return
}
"
`;

exports[`parser and printer > should format all fixtures > test.html 1`] = `
"<h1>编译 rust 为 WebAssembly</h1>
<div></div>
<p class=\\"summary\\">如果你写了一些 RUST 代码，你可以把它编译成 webAssembly！这份教程将带你编译 Rust 项目为 wasm 并在一个现存的 web 应用中使用它。</p></div>
<h2 id=\\"rust_和_webassembly_用例\\"><a href=\\"#rust_和_webassembly_用例\\" title=\\"Permalink to Rust和WebAssembly用例\\">Rust 和 WebAssembly 用例</a></h2>
<div><p>rust 和 webassembly 有两大主要用例：</p>
<ul>
<li>构建完整应用 —— 整个 web 应用都基于 rust 开发！</li>
<li>构建应用的组成部分 —— 在现存的 javascript 前端中使用 RUst。</li>
</ul>
<p>目前，Rust 团队正专注于第二种用例，因此我们也将着重介绍它。对于第一种用例，可以参阅<code><a href=\\"https://github.com/DenisKolodin/yew\\" class=\\"external\\" rel=\\" noopener\\">yew</a></code>这类项目。</p>
<p>在本教程中，我们将使用 Rust 的 npm 包构建工具<code>wasm-pack</code>来构建一个 npm 包。这个包只包含 WebAssembly 和 JavaScript 代码，以便包的用户无需安装 Rust 就能使用。他们甚至不需要知道这里包含 WebAssembly！</p></div>
"
`;

exports[`parser and printer > should format all fixtures > test.js 1`] = `
"/**
* Hello 你好
* 这是第 2 行
*/
function application() {
  let example = \\"这是 single line 单行注释\\";
  console.log(\\\\\`这是 string 第 1 行
  这是 string 第 2 行
  \\\\\`)
  // autocorrect-disable
  const disable_1 = \\"这行将会disable掉\\";
  const disable_2 = \\"这行将也会disable掉\\";
  // autocorrect-enable
  const c = \\"这是 string 第 3 行\\";
}
"
`;

exports[`parser and printer > should format all fixtures > test.md 1`] = `
"# 这是 Heading 1 大标题
**加粗** 
*倾斜*
~~删除线~~
这是**Bold 加粗**在 1 个段落中，这端会 correct 掉，如果是 inline code，例如\`Rust语言\`，也可以应该处理。
> 引用文本：Quote 也是可以的。
\`\`\`rust
// Codeblock 里面也会处理
let a = \\"你好 hello\\";
\`\`\`
- ![img 图片](https://google.com/a/b/url不处理)
- [link 链接](https://google.com/a/b/url不处理)\`,
  },
  rust: {
    title: 'Rust',
    raw: \`fn main() {
let number_list = vec![34, 50, 25, 100, 65];
let mut largest = number_list[0];
let regexp = %r\\"包含#regexp 测试\\";
// 1 第一行 Single line 注释
// 2 第二行注释
for number in number_list {
    if number > largest {
        largest = number;
    }
}
// autocorrect: false
let disable_1 = \\"这行将会 disable 掉\\";
let disable_2 = \\"这行将也会 disable 掉\\";
// autocorrect: true
let a = r#\\"
这是第 1 行
这是第 2 行
\\"#;
let b = r##\\"
这是第 3 行
这是第 4 行
\\"##;
/**
 * 多行 Rust 注释
 * 第二行 Rust 注释
*/
println!(\\"最大的数字 number 是{}\\", largest);
}
"
`;

exports[`parser and printer > should format all fixtures > test.py 1`] = `
"'''
这是多行 1 注释
这是多行 2 注释
这是多行 3 注释
'''
def hello(a):
  multi_str = \\"\\"\\"
  第 1 行多行字符串
  第 2 行多行字符串
  \\"\\"\\"
  re = r'包含#regexp测试'
  re1 = r\\"\\"\\"
    包含re0测试
    包含re1测试
  \\"\\"\\"
  re2 = re.compile( \\"hello你\\" + \\"world好\\")
  # 第 4 个注释
  print(\\"你好 hello 世界\\")
  print('你好 hello 世界')
  "
`;

exports[`parser and printer > should format all fixtures > test.rb 1`] = `
"# 第 1 行注释
# 第 2 行注释
def hello(a, b: \\"第 1 个参数\\")
  re = /hello你好/
  re1 = %r{hello你好}
  re2 = Regexp.new('hello你好' )
  re3 = Regexp.new( \\"hello你好\\")
  a = \\"hello 世界#{a}\\"
  b = '你好 hello 世界'
end
"
`;
